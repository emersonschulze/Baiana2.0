<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAgAAAAAACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADQ0NAAAAAAAAAAAAAAAAGiIiIkNWVlaXZmZmwYeHh/GVlZX6mJiY+pmZ
        mfaVlZX4ioqK53x8fNBbW1uTTExMaj4+PkAAAAAJ////AEFBQQAFBQUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAARERFBV1dXwOLi4v/u7u7/9/f3/+np6f/t7e3/9/f3//b2
        9v/39/f/7Ozs/+rq6v/29vb/9fX1//Pz8//j4+P/5+fn//Dw8P/j4+P/vb296ZmZmcBpaWl6AAAAA05O
        TgAtLS0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYKCguq1tbX/7+/v//f39//39/f/5ubm/+7u
        7v/39/f/9/f3//f39//s7Oz/6+vr//f39//39/f/9/f3/+vr6//m5ub/9/f3//b29v/t7e3/5ubm/9jY
        2P95eXmkODg4Uzo6OgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANu7u7/8HBwf/u7u7/+Pj4//f3
        9//t7e3/8fHx//f39//4+Pj/9/f3//Dw8P/v7+//+Pj4//j4+P/39/f/7u7u/+vr6//39/f/9/f3//X1
        9f/p6en/7Ozs/+fn5//FxcX8AAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJGRkQCzs7P/xMTE/93d
        3f/e3t7/5eXl//j4+P/19fX/xsbG/8jIyP/Hx8f/8vLy/+np6f/CwsL/v7+//+Hh4f/19fX/9PT0/9jY
        2P/m5ub/9/f3//T09P/39/f/+fn5/97e3v+WlpYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4AKGh
        oey/v7//tbW1/s7Ozv/Dw8P/39/f/8zMzP/Y2Nj/6Ojo/+Xl5f/Ly8v/yMjI/+Xl5f/r6+v/xsbG/8jI
        yP/Kysr/zs7O/8bGxv/x8fH/9vb2/+7u7v/7+/v/tbW17yIiIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAFBQUAgoKC3L+/v//Jycn/5eXl//T09P/29vb/9vb2//f39//w8PD/9PT0//f39//39/f/9/f3//T0
        9P/39/f/9vb2//f39//q6ur/9PT0/+jo6P/r6+v/6enp/66urv9HR0eAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABycnLGxMTE/8bGxv/m5ub/+Pj4//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//b29v/39/f/9/f3//f39//x8fH/xsbG/zY2NmEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9PT5m5ubn/xMTE/9jY2P/39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39/+9vb3wJCQkOwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE3JycsrFxcX/xsbG/+Xl5f/39/f/9/f3//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/+Pj4/2Ji
        Yo7///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACqqqoAOzs7fMfHx//ExMT/1dXV//f3
        9//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//6+vr/KCgoOzU1NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABs7Oz/8bG
        xv/ExMT/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        9//39/f/+vr6/8TExPZJSUkABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYW
        FgCHh4fqx8fH/8XFxf/w8PD/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f39//39/f/9/f3//f3
        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
        AAAAAAAAAAAAAAAAAAAQAAACAAAAAAAAAAA=
</value>
  </data>
</root>